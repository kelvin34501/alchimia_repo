#ifndef PYTHONADAPTER_H_INCLUDED
#define PYTHONADAPTER_H_INCLUDED

#include <iostream>
#include <string>
#include <QObject>
#include <QtCore/QProcess>

using namespace std;

class PythonAdapter : public QObject
{
    Q_OBJECT

public:
    virtual ~PythonAdapter() {}
    /* runPython: run the python at given path, does NOT wait or check status */
    /* param:
        file_path: string, the path of python file, extra "" will be auto added.
            The path is NOT selected by user, but generated by the ModelControl.
            MAY SWITCH TO INFORMATION IN QT.
    */
    virtual int runPython(const char* file_path) = 0;
    virtual int runPythonAsync(const char* file_path) = 0;
    /* activateTB: activate Tensorboard and open browser */
    /* param:
        log_dir: string, the directory of Tensorboard log, extra "" will be auto added.
            The folder is created by the system, and the path is generated by the system.
            MAY SWITCH TO INFORMATION IN QT.
    */
    virtual int activateTB(const char* log_dir) = 0;
    /* setPythonPath: set path to the python.exe, should be called when creating */
    /*              or loading project                                           */
    /* param:
        path: string, the path to the python.exe, extra "" will be auto added. The
            path IS selected by user. MAY SWITCH TO INFORMATION IN QT.
    */
    void setPythonPath(const char* path){
        pypath = path;
    }
    /* setTBPath: set path to the tensorboard.exe, should be called when creating */
    /*          or loading project                                                */
    /* param:
        path: string, the path to the python.exe, extra "" will be auto added. The
            path IS selected by user. MAY SWITCH TO INFORMATION IN QT.
    */
    void setTBPath(const char* path){
        tbpath = path;
    }
    virtual void killtb() = 0;
    virtual void killpy() = 0;
protected:
    string pypath;
    string tbpath;

signals:
    void outputUpdated(string msg);
};

/* Windows.h implementation of PythonAdapter */
class WindowsPython : public PythonAdapter{
public:
    ~WindowsPython() {}
    int runPython(const char* file_path);
    int runPythonAsync(const char* file_path){
        return runPython(file_path);
    }
    int activateTB(const char* log_dir);
};

class QTPython : public PythonAdapter{
public:
    QTPython() {
        tb_process = new QProcess();
        py_process = new QProcess();
        tb_status = 0;
        py_status = 0;
    }
    ~QTPython() {
        py_status = 0;
        py_process->waitForFinished();
        if(tb_process->state() == QProcess::Running){
            tb_process->kill();
            tb_process->waitForFinished();
        }
    }
    int runPython(const char* file_path);
    int runPythonAsync(const char* file_path);
    int activateTB(const char* log_dir);
    void killtb();
    void killpy() { py_status = 0; }
private:
    QProcess *tb_process;
    QProcess *py_process;
    int tb_status;
    int py_status;
};

#endif // PYTHONADAPTER_H_INCLUDED
